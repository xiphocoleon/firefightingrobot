/**********************************************************************************
 *
 *        CCNY FIRST ROBOTICS NAVIGATIONAL CODE SPRING 2015
 *
 ***********************************************************************************/
//__ READ FIRST: Code comments:
/*
1. I have finished the orientation function with the stepper code but it has not been tested.
 I am not sure how "far" the stepper motors will turn for the values I entered.
 
 2. Thomas: I am now working on the determineTurn function
 
 3. The sound start, flame detect, and extinguish functions need to be written and tested
 
 4. Luky is working on a debounce feature to improve sensor reading reliability
 
 
 */

//BEGIN CODE:

// BEGIN STEPPER TEMPLATE CODE -- NEEDS IMPLEMENTATION

/*-----( Libraries )-----*/
#include <NewPing.h>
#define MAX_DISTANCE 200 // Maximum distance we want to ping for (in centimeters). Maximum sensor distance is rated at 400-500cm.
#include <AccelStepper.h>
#define HALFSTEP 8

// GLOBAL VARIABLE DECLARATIONS

// I. Sensor pin declarations. Currently the back sensors have not been implemented.

const int TrigLback_pin = 7;  // pin for triggering pulse    
const int EchoLback_pin = A0;  // pin for recieving echo
const int TrigLfront_pin = 3;  // pin for triggering pulse    
const int EchoLfront_pin = A1;  // pin for recieving echo
const int TrigC_pin = 4;  // pin for triggering pulse    
const int EchoC_pin = A2;  // pin for recieving echo
const int TrigRfront_pin = 5;  // pin for triggering pulse    
const int EchoRfront_pin = A3;  // pin for recieving echo
const int TrigRback_pin=6;  // pin for triggering pulse    
const int EchoRback_pin = A4;  // pin for recieving echo

// 2. Start button, sound start, flame sensor declarations
const int start = 2; // pin for receiving start signal
int buttonState = 0; // initial state for button-reading pin
int soundDetect; //Need analog pin on the MEGA 
int flameDetect; //Need analog pin on Mega
int flameState = 0;
int flameThreshold;

// 3. Global tolerance value for "tooClose" distance
int tooClose = 25;

// 4. Sensor reading variables;
int readRback;
int readRfront;
int readC;
int readLfront;
int readLback;

// 5. Stepper declaration section:
// -- motor pins
#define motorPin1  3     // IN1 on the ULN2003 driver 1
#define motorPin2  4     // IN2 on the ULN2003 driver 1
#define motorPin3  5     // IN3 on the ULN2003 driver 1
#define motorPin4  6     // IN4 on the ULN2003 driver 1

#define motorPin5  8     // IN1 on the ULN2003 driver 2
#define motorPin6  9     // IN2 on the ULN2003 driver 2
#define motorPin7  10    // IN3 on the ULN2003 driver 2
#define motorPin8  11    // IN4 on the ULN2003 driver 2

// -- Initialize stepper motors with pin sequence IN1-IN3-IN2-IN4 for using the AccelStepper with 28BYJ-48
AccelStepper stepper1(HALFSTEP, motorPin1, motorPin3, motorPin2, motorPin4);
AccelStepper stepper2(HALFSTEP, motorPin5, motorPin7, motorPin6, motorPin8);

// -- Stepper variables
int turnSteps = 2100; // number of steps for a 90 degree turn
int lineSteps = -6600; //number of steps to drive straight
int stepperSpeed = 1000; //speed of the stepper (steps per second)
int steps1 = 0; // keep track of the step count for motor 1
int steps2 = 0; // keep track of the step count for motor 2

// -- variables from Stepper code to keep track of turns -- may not be needed
bool turn1 = false; //keep track if we are turning or going straight next
bool turn2 = false; //keep track if we are turning or going straight next


// BEGIN SETUP
void setup() 
{

  // 1. pinMode declarations

  pinMode(TrigLback_pin, OUTPUT);        // initialize the pulse pin as output:
  pinMode(EchoLback_pin, INPUT);         // initialize the echo_pin pin as an input:

  pinMode(TrigLfront_pin, OUTPUT);        // initialize the pulse pin as output:
  pinMode(EchoLfront_pin, INPUT);         // initialize the echo_pin pin as an input:

  pinMode(TrigC_pin, OUTPUT);        // initialize the pulse pin as output:
  pinMode(EchoC_pin, INPUT);         // initialize the echo_pin pin as an input:

  pinMode(TrigRfront_pin, OUTPUT);       // initialize the pulse pin as output:
  pinMode(EchoRfront_pin, INPUT);         // initialize the echo_pin pin as an input:

  pinMode(TrigRback_pin, OUTPUT);        // initialize the pulse pin as output:
  pinMode(EchoRback_pin, INPUT);         // initialize the echo_pin pin as an input:

  pinMode(start, INPUT);

  // 2. Motor declarations

  delay(3000); //sime time to put the robot down after swithing it on

  stepper1.setMaxSpeed(2000.0);
  stepper1.move(1);  // I found this necessary
  stepper1.setSpeed(stepperSpeed);

  stepper2.setMaxSpeed(2000.0);
  stepper2.move(-1);  // I found this necessary
  stepper2.setSpeed(stepperSpeed);

  // 3. Serial and other declarations

  Serial.begin(9600);
}

// BEGIN LOOP
void loop() 
{
  // Start button and sound detection module:
  // Robot does nothing until Start button pushed OR 3.8kHz sound signalled  
  int buttonPushed = 0;
  digitalWrite(start, LOW);

  int soundThreshold = 532;
  int soundCheck = 0;
  /*
  do 
   {
   buttonState = digitalRead(start);
   soundCheck = analogRead(soundDetect);
   Serial.println("Waiting to begin"); 
   Serial.print("Start pin is: "); Serial.println(start);
   Serial.print("soundCheck value is: "); Serial.println(soundCheck);
   delay(500);
   }
   */
  // while (buttonState == LOW /*|| (soundCheck < soundThresh) */);
  // Serial.println("Button pushed or sound heard");

  while (true) 
  {    
    // Orient robot parallel to nearest left or right wall
    orientation();
    determineTurn();
  }
}

/*-----( Functions )-----*/
void orientation() 
{  
  //Read all sensors:
  int* sensorArray = fiveSensorRead();
  //The sensor variable names in the if/while/else if statements need to be updated
  //to ex: fiveSensorRead[]

  // Sensor array is read from left-back, clockwise to right-back
  // Sensor array elements: 0 left back, 1 left front, 2 center, 3 right front, 4 right back

  // Right-side parallel wall orientation, turn to right
  if (sensorArray[3] > sensorArray[4])
  {
    while(sensorArray[3] > sensorArray[4])
    {
      Serial.println("Turn right to orient");
      // Call modular five sensor read
      fiveSensorRead();
      // MOTOR: TURN RIGHT        
      stepper1.move(100); //Left stepper turns 100 forwards
      stepper2.move(-100); //Right stepper turns 100 backwards

      Serial.print("Sensor right front: "); 
      Serial.println(sensorArray[3]);
      Serial.print("Sensor right back: "); 
      Serial.println(sensorArray[4]);
    }

    //Stop motor once parallel to wall
    Serial.println("Motor stop");
    //STOP MOTOR
    stepper1.move(0);
    stepper2.move(0); //motors stopped
  } 

  //Right-side wall orientation, turn to left:
  else if (sensorArray[4] > sensorArray[3]) 
  {
    while(sensorArray[4] > sensorArray[3])
    {
      Serial.println("Turn left to orient");
      // Call modular five sensor read
      fiveSensorRead();
      // MOTOR: TURN LEFT        
      stepper1.move(-100); //Left stepper turns 100 backwards
      stepper2.move(100); //Right stepper turns 100 forwards

      Serial.print("Sensor right front: "); 
      Serial.println(sensorArray[3]);
      Serial.print("Sensor right back: "); 
      Serial.println(sensorArray[4]);
    }

    //Stop motor once parallel to wall
    Serial.println("Motor stop");
    //STOP MOTOR
    stepper1.move(0);
    stepper2.move(0); //motors stopped
  } 

  else
  {
    while (sensorArray[2] > tooClose);
    {
      Serial.println("Help! I'm in orientation ELSE. Failed to orient.");
      Serial.println("Going forward, just a little bit until gets too close to center sensor.");
      stepper1.move(100);
      stepper2.move(100); //motors stopped
    }
  }

}// End orientation

void determineTurn ()
{
  // Orientation should be complete, and car should be parallel to wall
  // Five sensor read called:
  int* sensorArray = fiveSensorRead();

  // sensorArray elements read left back counter-clockwise to right back:
  //  0 Left Back, 1 Left Front, 2 Center, 3 Right Front, 4 Right Back
  
  // Determine Turn Part 1: Go straight first, if possible:
  if ( sensorArray[2] > tooClose)
  {
    while(sensorArray[2] > tooClose)
    {
      sensorArray = fiveSensorRead();
      stepper1.move(100);
      stepper2.move(100); //Steppers go forward
      Serial.println("Determine Turn 1: go straight first if possible");
    }
  }   
  else
  {  
  Serial.println("Determine Turn 1: straight is blocked. Move on to Determine turn part 2.");
  }
  delay(100);
  
    
  // Determine Turn Part II: Right turn priority algorithm:
  //Comments in CAPS from TURN FLOWCHART shared on Google Drive

  // -- IS RIGHT BLOCKED?

  // -- YES.
  if ( (sensorArray[4] <= tooClose) && (sensorArray[3] <= tooClose )  )
  {
    Serial.println("Determine Turn 2: right is blocked");
    // -- IS FORWARD BLOCKED?
    // -- NO. GO FORWARD UNTIL RIGHT OPEN
    if (sensorArray[2] > tooClose)
    {
      Serial.println("Determine Turn 2: straight is open. Prepare to go straight.");
      while(sensorArray[2] > tooClose)
      {
        Serial.println("Determine Turn 2: Going straight until too close");
        fiveSensorRead();
        stepper1.move(100);
        stepper2.move(100);
      }
    }
    // -- YES FORWARD BLOCKED. TURN LEFT 90 DEGREES.
    else
    {
      while(sensorArray[2] <= tooClose)
      {
        // Call modular five sensor read
        fiveSensorRead();
        // MOTOR: TURN LEFT   
        Serial.println("Determine Turn 2: forward and right blocked. Going left.");
        stepper1.move(-100); //Left stepper turns 100 backwards
        stepper2.move(100); //Right stepper turns 100 forwards
      }
    }
  }
  // -- NO. RIGHT NOT BLOCKED. TURN RIGHT 90 DEGREES
  else
  {
      while(sensorArray[2] <= tooClose)
      {
        // Call modular five sensor read
        fiveSensorRead();
        // MOTOR: TURN RIGHT   
        Serial.println("Determine Turn 2: Right is open. Turning 90 degrees to right.");
        stepper1.move(100); //Left stepper turns 100 forwards
        stepper2.move(-100); //Right stepper turns 100 backwards
      }  
  }

}

/*-----( Flame Sensor Functions )-----*/
int flameSense()
{
  flameState = analogRead(flameDetect);
  if (flameState > flameThreshold)
  {
    //If flameState has detected the candle, run extinguish function
    extinguish();
  }
  else{
  }

}

void extinguish ()
{
}

/*-----( Sensor Functions )-----*/

// Sensor reading function

//Luky: some declarations missing here; not sure what you want, so this is commented out for now.
int sensorRead(int Trig_pin, int Echo_pin)
{
  NewPing sonar(Trig_pin, Echo_pin, MAX_DISTANCE); // NewPing setup of pins and maximum distance.
  delay(50);                      // Wait 50ms between pings (about 20 pings/sec). 29ms is the shortest delay between pings
  unsigned int uS = sonar.ping(); // Send ping, get ping time in microseconds (uS).
  int reading = uS / US_ROUNDTRIP_CM;
  return reading;
} // End sensorRead


// Calibration for sensor data to centimeters function
long microsecondsToCentimeters(long microseconds)
{
  return microseconds / 29 / 2;
}// End ms to cm

// Modular sensor reading that reads all five sensors when called; 
// it returns a five-element array, in which each value is a sensor reading
// NOTE: The function below is under test.
int* fiveSensorRead()
{
  //Element 0
  readLback = sensorRead(TrigLback_pin, EchoLback_pin);
  delay(100);
  //Serial.print("LB: "); Serial.println(readLback);
  //Element 1
  readLfront = sensorRead(TrigLfront_pin, EchoLfront_pin);
  delay(100);
  //Serial.print("LF: "); Serial.println(readLfront);

  //Element 2
  readC = sensorRead(TrigC_pin, EchoC_pin);
  delay(100);
  Serial.print("C: "); 
  Serial.println(readC);
  //Element 3
  readRfront = sensorRead(TrigRfront_pin, EchoRfront_pin);
  delay(100);
  //Serial.print("RF: "); Serial.println(readRfront);
  //Element 4
  readRback = sensorRead(TrigRback_pin, EchoRback_pin);
  delay(100);
  //Serial.print("RB: "); Serial.println(readRback);

  int sensorReading[5] = {
    readLback, readLfront, readC, readRfront, readRback    }; 

  return sensorReading;
}
